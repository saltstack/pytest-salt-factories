name: CI

on: [push, pull_request]

jobs:
  Pre-Commit:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.7
    - id: changed-files
      name: Get Changed Files
      uses: dorny/paths-filter@v2
      with:
        token: ${{ github.token }}
        list-files: shell
        filters: |
          repo:
            - added|modified:
              - '**'
    - name: Set Cache Key
      run: echo "PY=$(python --version --version | sha256sum | cut -d' ' -f1)" >> $GITHUB_ENV
    - uses: actions/cache@v2
      with:
        path: ~/.cache/pre-commit
        key: pre-commit|${{ env.PY }}|${{ hashFiles('.pre-commit-config.yaml') }}
    - name: Check ALL Files On Branch
      uses: pre-commit/action@v2.0.0
      if: github.event_name != 'pull_request'
    - name: Check Changed Files On PR
      uses: pre-commit/action@v2.0.0
      if: github.event_name == 'pull_request'
      with:
        extra_args: --files ${{ steps.changed-files.outputs.repo_files }}


  Docs:
    runs-on: ubuntu-20.04
    needs: Pre-Commit

    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Set up Python 3.7 For Nox
      uses: actions/setup-python@v2
      with:
        python-version: 3.7

    - name: Install Nox
      run: |
        python -m pip install --upgrade pip
        pip install nox

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Doc Requirements
      run: |
        nox --force-color -e docs --install-only

    - name: Build Docs
      env:
        SKIP_REQUIREMENTS_INSTALL: YES
      run: |
        nox --force-color -e docs


  Linux:
    runs-on: ubuntu-20.04
    needs: Pre-Commit

    timeout-minutes: 20

    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        python-version:
          - 3.6
          - 3.7
          - 3.8
          - 3.9
        salt-version:
          - salt==3002.6

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Nox
      run: |
        python -m pip install --upgrade pip
        pip install nox

    - name: Install Test Requirements
      env:
        SALT_REQUIREMENT: ${{ matrix.salt-version }}
      run: |
        nox --force-color -e tests-${{ matrix.python-version }} --install-only

    - name: Test
      id: run-tests
      env:
        SALT_REQUIREMENT: ${{ matrix.salt-version }}
        SKIP_REQUIREMENTS_INSTALL: YES
      run: |
        nox --force-color -e tests-${{ matrix.python-version }} -- -vv tests/

    - name: Create CodeCov Flags
      if: always()
      id: codecov-flags
      run: |
        echo ::set-output name=flags::$(python -c "import sys; print('{},{},{}'.format('${{ runner.os }}'.replace('-latest', ''), 'py{}{}'.format(*sys.version_info), '_'.join(str(v) for v in '${{ matrix.salt-version }}'.replace('==', '_').split('.'))))")

    - name: Upload Salt Factories Code Coverage
      if: always()
      shell: bash
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        REPORT_FLAGS: ${{ steps.codecov-flags.outputs.flags }},factories
        REPORT_NAME: ${{ runner.os }}-Py${{ matrix.python-version }}-${{ matrix.salt-version }}-factories
        REPORT_PATH: artifacts/coverage-saltfactories.xml
      run: |
        if [ ! -f codecov.sh ]; then
          n=0
          until [ "$n" -ge 5 ]
          do
          if curl --max-time 30 -L https://codecov.io/bash --output codecov.sh; then
              break
          fi
            n=$((n+1))
            sleep 15
          done
        fi
        if [ -f codecov.sh ]; then
          n=0
          until [ "$n" -ge 5 ]
          do
            if bash codecov.sh -R $(pwd) -n "${REPORT_NAME}" -f "${REPORT_PATH}" -F "${REPORT_FLAGS}"; then
                break
            fi
            n=$((n+1))
            sleep 15
          done
        fi

    - name: Upload Salt Factories Tests Code Coverage
      if: always()
      shell: bash
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        REPORT_FLAGS: ${{ steps.codecov-flags.outputs.flags }},factories
        REPORT_NAME: ${{ runner.os }}-Py${{ matrix.python-version }}-${{ matrix.salt-version }}-tests
        REPORT_PATH: artifacts/coverage-tests.xml
      run: |
        if [ ! -f codecov.sh ]; then
          n=0
          until [ "$n" -ge 5 ]
          do
          if curl --max-time 30 -L https://codecov.io/bash --output codecov.sh; then
              break
          fi
            n=$((n+1))
            sleep 15
          done
        fi
        if [ -f codecov.sh ]; then
          n=0
          until [ "$n" -ge 5 ]
          do
            if bash codecov.sh -R $(pwd) -n "${REPORT_NAME}" -f "${REPORT_PATH}" -F "${REPORT_FLAGS}"; then
                break
            fi
            n=$((n+1))
            sleep 15
          done
        fi

    - name: Upload Logs
      if: always()
      uses: actions/upload-artifact@main
      with:
        name: runtests-${{ runner.os }}-py${{ matrix.python-version }}-${{ matrix.salt-version }}.log
        path: artifacts/runtests-*.log


  Linux-System-Install:
    runs-on: ubuntu-20.04
    needs: Pre-Commit

    timeout-minutes: 15

    strategy:
      fail-fast: false

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Install Nox
      run: |
        sudo -E apt-get update
        sudo -E apt-get install -y python3-setuptools python-is-python3
        sudo -E python3 -m pip install --upgrade pip
        sudo -E python3 -m pip install nox
        sudo mv /usr/bin/pip /usr/bin/pip2
        sudo ln -sf /usr/bin/pip3 /usr/bin/pip

    - name: Get Python Version
      if: always()
      id: python-version
      run: |
        echo ::set-output name=long::$(python -c "import sys; print('Py{}.{}'.format(*sys.version_info))")
        echo ::set-output name=short::$(python -c "import sys; print('{}{}'.format(*sys.version_info))")

    - name: Install Salt
      run: |
        curl -L https://bootstrap.saltstack.com | sudo sh -s -- -M -X -x python3 stable
        sudo apt-get install -y salt-api salt-ssh salt-syndic salt-cloud python3-pip
        # We need to upgrade pyzmq or we'll get coredumps
        sudo python3 -m pip install --ignore-installed -U pyzmq==19.0.0
        for service in $(sudo systemctl list-unit-files | grep salt | grep -v @ | awk '{ print $1 }'); do sudo systemctl stop $service; done

    - name: Install Test Requirements
      run: |
        sudo -E nox --force-color -e tests --no-venv --install-only

    - name: Test
      id: run-tests
      env:
        SKIP_REQUIREMENTS_INSTALL: YES
      run: |
        sudo -E nox --force-color -e tests --no-venv -- -vv tests/

    - name: Create CodeCov Flags
      if: always()
      id: codecov-flags
      run: |
        echo ::set-output name=flags::$(python -c "import sys; print('{},{},{}'.format('${{ runner.os }}'.replace('-latest', ''), 'py{}{}'.format(*sys.version_info), 'system'))")

    - name: Upload Salt Factories Code Coverage
      if: always()
      shell: bash
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        REPORT_FLAGS: ${{ steps.codecov-flags.outputs.flags }},factories
        REPORT_NAME: ${{ runner.os }}-${{ steps.python-version.outputs.long }}-system-factories
        REPORT_PATH: artifacts/coverage-saltfactories.xml
      run: |
        if [ ! -f codecov.sh ]; then
          n=0
          until [ "$n" -ge 5 ]
          do
          if curl --max-time 30 -L https://codecov.io/bash --output codecov.sh; then
              break
          fi
            n=$((n+1))
            sleep 15
          done
        fi
        if [ -f codecov.sh ]; then
          n=0
          until [ "$n" -ge 5 ]
          do
            if bash codecov.sh -R $(pwd) -n "${REPORT_NAME}" -f "${REPORT_PATH}" -F "${REPORT_FLAGS}"; then
                break
            fi
            n=$((n+1))
            sleep 15
          done
        fi

    - name: Upload Salt Factories Tests Code Coverage
      if: always()
      shell: bash
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        REPORT_FLAGS: ${{ steps.codecov-flags.outputs.flags }},tests
        REPORT_NAME: ${{ runner.os }}-${{ steps.python-version.outputs.long }}-system-tests
        REPORT_PATH: artifacts/coverage-tests.xml
      run: |
        if [ ! -f codecov.sh ]; then
          n=0
          until [ "$n" -ge 5 ]
          do
          if curl --max-time 30 -L https://codecov.io/bash --output codecov.sh; then
              break
          fi
            n=$((n+1))
            sleep 15
          done
        fi
        if [ -f codecov.sh ]; then
          n=0
          until [ "$n" -ge 5 ]
          do
            if bash codecov.sh -R $(pwd) -n "${REPORT_NAME}" -f "${REPORT_PATH}" -F "${REPORT_FLAGS}"; then
                break
            fi
            n=$((n+1))
            sleep 15
          done
        fi

    - name: Upload Logs
      if: always()
      uses: actions/upload-artifact@main
      with:
        name: runtests-${{ runner.os }}-py${{ steps.python-version.outputs.short }}-system.log
        path: artifacts/runtests-*.log


  Windows:
    runs-on: windows-latest
    needs: Pre-Commit

    timeout-minutes: 40

    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        python-version:
          - 3.7
        salt-version:
          - salt==3002.6

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Nox
      run: |
        python -m pip install --upgrade pip
        pip install nox

    - name: Install Test Requirements
      shell: bash
      env:
        SALT_REQUIREMENT: ${{ matrix.salt-version }}
      run: |
        export PATH="/C/Program Files (x86)/Windows Kits/10/bin/10.0.18362.0/x64;$PATH"
        nox --force-color -e tests-${{ matrix.python-version }} --install-only

    - name: Test
      id: run-tests
      shell: bash
      env:
        SALT_REQUIREMENT: ${{ matrix.salt-version }}
        SKIP_REQUIREMENTS_INSTALL: YES
      run: |
        export PATH="/C/Program Files (x86)/Windows Kits/10/bin/10.0.18362.0/x64;$PATH"
        nox --force-color -e tests-${{ matrix.python-version }} -- -vv tests/

    - name: Create CodeCov Flags
      if: always()
      id: codecov-flags
      run: |
        echo ::set-output name=flags::$(python -c "import sys; print('{},{},{}'.format('${{ runner.os }}'.replace('-latest', ''), 'py{}{}'.format(*sys.version_info), '_'.join(str(v) for v in '${{ matrix.salt-version }}'.replace('==', '_').split('.'))))")

    - name: Upload Salt Factories Code Coverage
      if: always()
      shell: bash
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        REPORT_FLAGS: ${{ steps.codecov-flags.outputs.flags }},factories
        REPORT_NAME: ${{ runner.os }}-Py${{ matrix.python-version }}-${{ matrix.salt-version }}-factories
        REPORT_PATH: artifacts/coverage-saltfactories.xml
      run: |
        if [ ! -f codecov.sh ]; then
          n=0
          until [ "$n" -ge 5 ]
          do
          if curl --max-time 30 -L https://codecov.io/bash --output codecov.sh; then
              break
          fi
            n=$((n+1))
            sleep 15
          done
        fi
        if [ -f codecov.sh ]; then
          n=0
          until [ "$n" -ge 5 ]
          do
            if bash codecov.sh -R $(pwd) -n "${REPORT_NAME}" -f "${REPORT_PATH}" -F "${REPORT_FLAGS}"; then
                break
            fi
            n=$((n+1))
            sleep 15
          done
        fi

    - name: Upload Salt Factories Tests Code Coverage
      if: always()
      shell: bash
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        REPORT_FLAGS: ${{ steps.codecov-flags.outputs.flags }},factories
        REPORT_NAME: ${{ runner.os }}-Py${{ matrix.python-version }}-${{ matrix.salt-version }}-tests
        REPORT_PATH: artifacts/coverage-tests.xml
      run: |
        if [ ! -f codecov.sh ]; then
          n=0
          until [ "$n" -ge 5 ]
          do
          if curl --max-time 30 -L https://codecov.io/bash --output codecov.sh; then
              break
          fi
            n=$((n+1))
            sleep 15
          done
        fi
        if [ -f codecov.sh ]; then
          n=0
          until [ "$n" -ge 5 ]
          do
            if bash codecov.sh -R $(pwd) -n "${REPORT_NAME}" -f "${REPORT_PATH}" -F "${REPORT_FLAGS}"; then
                break
            fi
            n=$((n+1))
            sleep 15
          done
        fi

    - name: Upload Logs
      if: always()
      uses: actions/upload-artifact@main
      with:
        name: runtests-${{ runner.os }}-py${{ matrix.python-version }}-${{ matrix.salt-version }}.log
        path: artifacts/runtests-*.log


  macOS:
    runs-on: macOS-latest
    needs: Pre-Commit

    timeout-minutes: 60

    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        python-version:
          - 3.7
        salt-version:
          - salt==3002.6

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Nox
      run: |
        python -m pip install --upgrade pip
        pip install nox

    - name: Install Test Requirements
      env:
        SALT_REQUIREMENT: ${{ matrix.salt-version }}
      run: |
        nox --force-color -e tests-${{ matrix.python-version }} --install-only

    - name: Test
      id: run-tests
      env:
        SALT_REQUIREMENT: ${{ matrix.salt-version }}
        SKIP_REQUIREMENTS_INSTALL: YES
      run: |
        nox --force-color -e tests-${{ matrix.python-version }} -- -vv tests/

    - name: Create CodeCov Flags
      if: always()
      id: codecov-flags
      run: |
        echo ::set-output name=flags::$(python -c "import sys; print('{},{},{}'.format('${{ runner.os }}'.replace('-latest', ''), 'py{}{}'.format(*sys.version_info), '_'.join(str(v) for v in '${{ matrix.salt-version }}'.replace('==', '_').split('.'))))")

    - name: Upload Salt Factories Code Coverage
      if: always()
      shell: bash
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        REPORT_FLAGS: ${{ steps.codecov-flags.outputs.flags }},factories
        REPORT_NAME: ${{ runner.os }}-Py${{ matrix.python-version }}-${{ matrix.salt-version }}-factories
        REPORT_PATH: artifacts/coverage-saltfactories.xml
      run: |
        if [ ! -f codecov.sh ]; then
          n=0
          until [ "$n" -ge 5 ]
          do
          if curl --max-time 30 -L https://codecov.io/bash --output codecov.sh; then
              break
          fi
            n=$((n+1))
            sleep 15
          done
        fi
        if [ -f codecov.sh ]; then
          n=0
          until [ "$n" -ge 5 ]
          do
            if bash codecov.sh -R $(pwd) -n "${REPORT_NAME}" -f "${REPORT_PATH}" -F "${REPORT_FLAGS}"; then
                break
            fi
            n=$((n+1))
            sleep 15
          done
        fi

    - name: Upload Salt Factories Tests Code Coverage
      if: always()
      shell: bash
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        REPORT_FLAGS: ${{ steps.codecov-flags.outputs.flags }},factories
        REPORT_NAME: ${{ runner.os }}-Py${{ matrix.python-version }}-${{ matrix.salt-version }}-tests
        REPORT_PATH: artifacts/coverage-tests.xml
      run: |
        if [ ! -f codecov.sh ]; then
          n=0
          until [ "$n" -ge 5 ]
          do
          if curl --max-time 30 -L https://codecov.io/bash --output codecov.sh; then
              break
          fi
            n=$((n+1))
            sleep 15
          done
        fi
        if [ -f codecov.sh ]; then
          n=0
          until [ "$n" -ge 5 ]
          do
            if bash codecov.sh -R $(pwd) -n "${REPORT_NAME}" -f "${REPORT_PATH}" -F "${REPORT_FLAGS}"; then
                break
            fi
            n=$((n+1))
            sleep 15
          done
        fi

    - name: Upload Logs
      if: always()
      uses: actions/upload-artifact@main
      with:
        name: runtests-${{ runner.os }}-py${{ matrix.python-version }}-${{ matrix.salt-version }}.log
        path: artifacts/runtests-*.log


#  FreeBSD:
#    runs-on: macOS-latest
#    needs: Pre-Commit
#
#    timeout-minutes: 60
#
#    strategy:
#      fail-fast: false
#      max-parallel: 3
#      matrix:
#        salt-version:
#          - salt==3002.6
#
#    steps:
#    - uses: actions/checkout@v2
#
#    - name: Test
#      id: run-tests
#      uses: vmactions/freebsd-vm@v0.0.9
#      with:
#        envs: 'SALT_REQUIREMENT'
#        prepare: |
#          pkg install -y py37-pip py37-sqlite3 libunwind libzmq4 git
#          pip-3.7 install nox cython
#          ln -s /usr/local/bin/python3.7 /usr/local/bin/python3
#          echo "DONE"
#        run: |
#          nox --force-color -e tests-3 -- -vv tests/
#      env:
#        SALT_REQUIREMENT: ${{ matrix.salt-version }}
#
#    - name: Create CodeCov Flags
#      if: always()
#      id: codecov-flags
#      run: |
#        echo ::set-output name=flags::$(python -c "import sys; print('{},{},{}'.format('FreeBSD', 'py{}{}'.format(*sys.version_info), '_'.join(str(v) for v in '${{ matrix.salt-version }}'.replace('==', '_').split('.'))))")
#
#    - name: Upload Salt Factories Code Coverage
#      if: always()
#      shell: bash
#      env:
#        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
#        REPORT_FLAGS: ${{ steps.codecov-flags.outputs.flags }},factories
#        REPORT_NAME: FreeBSD-Py3-${{ matrix.salt-version }}-factories
#        REPORT_PATH: artifacts/coverage-saltfactories.xml
#      run: |
#        if [ ! -f codecov.sh ]; then
#          n=0
#          until [ "$n" -ge 5 ]
#          do
#          if curl --max-time 30 -L https://codecov.io/bash --output codecov.sh; then
#              break
#          fi
#            n=$((n+1))
#            sleep 15
#          done
#        fi
#        if [ -f codecov.sh ]; then
#          n=0
#          until [ "$n" -ge 5 ]
#          do
#            if bash codecov.sh -R $(pwd) -n "${REPORT_NAME}" -f "${REPORT_PATH}" -F "${REPORT_FLAGS}"; then
#                break
#            fi
#            n=$((n+1))
#            sleep 15
#          done
#        fi
#
#    - name: Upload Salt Factories Tests Code Coverage
#      if: always()
#      shell: bash
#      env:
#        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
#        REPORT_FLAGS: ${{ steps.codecov-flags.outputs.flags }},factories
#        REPORT_NAME: FreeBSD-Py3-${{ matrix.salt-version }}-tests
#        REPORT_PATH: artifacts/coverage-tests.xml
#      run: |
#        if [ ! -f codecov.sh ]; then
#          n=0
#          until [ "$n" -ge 5 ]
#          do
#          if curl --max-time 30 -L https://codecov.io/bash --output codecov.sh; then
#              break
#          fi
#            n=$((n+1))
#            sleep 15
#          done
#        fi
#        if [ -f codecov.sh ]; then
#          n=0
#          until [ "$n" -ge 5 ]
#          do
#            if bash codecov.sh -R $(pwd) -n "${REPORT_NAME}" -f "${REPORT_PATH}" -F "${REPORT_FLAGS}"; then
#                break
#            fi
#            n=$((n+1))
#            sleep 15
#          done
#        fi
#
#    - name: Upload Logs
#      if: always()
#      uses: actions/upload-artifact@main
#      with:
#        name: runtests-FreeBSD-py3-${{ matrix.salt-version }}.log
#        path: artifacts/runtests-*.log
